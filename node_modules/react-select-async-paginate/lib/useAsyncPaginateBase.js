"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAsyncPaginateBase = exports.increaseStateId = void 0;

var _react = require("react");

var _useIsMountedRef = _interopRequireDefault(require("use-is-mounted-ref"));

var _useLazyRef = require("@vtaits/use-lazy-ref");

var _getInitialCache = require("./getInitialCache");

var _getInitialOptionsCache = require("./getInitialOptionsCache");

var _defaultShouldLoadMore = require("./defaultShouldLoadMore");

var _defaultReduceOptions = require("./defaultReduceOptions");

var _requestOptions = require("./requestOptions");

var increaseStateId = function increaseStateId(prevStateId) {
  return prevStateId + 1;
};

exports.increaseStateId = increaseStateId;

var useAsyncPaginateBase = function useAsyncPaginateBase(params) {
  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var defaultOptions = params.defaultOptions,
      _params$loadOptionsOn = params.loadOptionsOnMenuOpen,
      loadOptionsOnMenuOpen = _params$loadOptionsOn === void 0 ? true : _params$loadOptionsOn,
      _params$debounceTimeo = params.debounceTimeout,
      debounceTimeout = _params$debounceTimeo === void 0 ? 0 : _params$debounceTimeo,
      inputValue = params.inputValue,
      menuIsOpen = params.menuIsOpen,
      _params$filterOption = params.filterOption,
      filterOption = _params$filterOption === void 0 ? null : _params$filterOption,
      _params$reduceOptions = params.reduceOptions,
      reduceOptions = _params$reduceOptions === void 0 ? _defaultReduceOptions.defaultReduceOptions : _params$reduceOptions,
      _params$shouldLoadMor = params.shouldLoadMore,
      shouldLoadMore = _params$shouldLoadMor === void 0 ? _defaultShouldLoadMore.defaultShouldLoadMore : _params$shouldLoadMor;
  var isMountedRef = (0, _useIsMountedRef["default"])();
  var isInitRef = (0, _react.useRef)(true);
  var paramsRef = (0, _react.useRef)(params);
  paramsRef.current = params;
  var setStateId = (0, _react.useState)(0)[1];
  var optionsCacheRef = (0, _useLazyRef.useLazyRef)(function () {
    return (0, _getInitialOptionsCache.getInitialOptionsCache)(params);
  });
  var callRequestOptions = (0, _react.useCallback)(function (caller) {
    (0, _requestOptions.requestOptions)(caller, paramsRef, optionsCacheRef, debounceTimeout, function (reduceState) {
      optionsCacheRef.current = reduceState(optionsCacheRef.current);

      if (isMountedRef.current) {
        setStateId(increaseStateId);
      }
    }, reduceOptions);
  }, [debounceTimeout]);
  var handleScrolledToBottom = (0, _react.useCallback)(function () {
    var currentInputValue = paramsRef.current.inputValue;
    var currentOptions = optionsCacheRef.current[currentInputValue];

    if (currentOptions) {
      callRequestOptions('menu-scroll');
    }
  }, [callRequestOptions]);
  (0, _react.useEffect)(function () {
    if (isInitRef.current) {
      isInitRef.current = false;
    } else {
      optionsCacheRef.current = {};
      setStateId(increaseStateId);
    }

    if (defaultOptions === true) {
      callRequestOptions('autoload');
    }
  }, deps);
  (0, _react.useEffect)(function () {
    if (menuIsOpen && !optionsCacheRef.current[inputValue]) {
      callRequestOptions('input-change');
    }
  }, [inputValue]);
  (0, _react.useEffect)(function () {
    if (menuIsOpen && !optionsCacheRef.current[''] && loadOptionsOnMenuOpen) {
      callRequestOptions('menu-toggle');
    }
  }, [menuIsOpen]);
  var currentOptions = optionsCacheRef.current[inputValue] || (0, _getInitialCache.getInitialCache)(params);
  return {
    handleScrolledToBottom: handleScrolledToBottom,
    shouldLoadMore: shouldLoadMore,
    filterOption: filterOption,
    isLoading: currentOptions.isLoading,
    isFirstLoad: currentOptions.isFirstLoad,
    options: currentOptions.options
  };
};

exports.useAsyncPaginateBase = useAsyncPaginateBase;