import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import { useEffect, useRef, useCallback } from 'react';
import composeRefs from '@seznam/compose-react-refs';
import { jsx as _jsx } from "react/jsx-runtime";
export var CHECK_TIMEOUT = 300;
export function wrapMenuList( // eslint-disable-next-line @typescript-eslint/naming-convention
MenuList) {
  function WrappedMenuList(props) {
    var selectProps = props.selectProps,
        innerRef = props.innerRef;
    var _ref = selectProps,
        handleScrolledToBottom = _ref.handleScrolledToBottom,
        shouldLoadMore = _ref.shouldLoadMore;
    var checkTimeoutRef = useRef();
    var menuListRef = useRef(null);
    var shouldHandle = useCallback(function () {
      var el = menuListRef.current; // menu is not rendered

      if (!el) {
        return false;
      }

      var scrollTop = el.scrollTop,
          scrollHeight = el.scrollHeight,
          clientHeight = el.clientHeight;
      return shouldLoadMore(scrollHeight, clientHeight, scrollTop);
    }, [shouldLoadMore]);
    var checkAndHandle = useCallback(function () {
      if (shouldHandle()) {
        if (handleScrolledToBottom) {
          handleScrolledToBottom();
        }
      }
    }, [shouldHandle, handleScrolledToBottom]);
    var setCheckAndHandleTimeout = useCallback(function () {
      checkAndHandle();
      checkTimeoutRef.current = setTimeout(setCheckAndHandleTimeout, CHECK_TIMEOUT);
    }, [checkAndHandle]);
    useEffect(function () {
      setCheckAndHandleTimeout();
      return function () {
        if (checkTimeoutRef.current) {
          clearTimeout(checkTimeoutRef.current);
        }
      };
    }, []);
    return /*#__PURE__*/_jsx(MenuList, _objectSpread(_objectSpread({}, props), {}, {
      innerRef: composeRefs(innerRef, menuListRef)
    }));
  }

  return WrappedMenuList;
}