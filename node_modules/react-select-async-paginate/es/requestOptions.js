import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _toPropertyKey from "@babel/runtime/helpers/toPropertyKey";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import sleep from 'sleep-promise';
import { getInitialCache } from './getInitialCache';
import { validateResponse } from './validateResponse';
export var requestOptions = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(caller, paramsRef, optionsCacheRef, debounceTimeout, setOptionsCache, reduceOptions) {
    var currentInputValue, isCacheEmpty, currentOptions, newInputValue, response, hasError, loadOptions, _response, options, hasMore, newAdditional;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            currentInputValue = paramsRef.current.inputValue;
            isCacheEmpty = !optionsCacheRef.current[currentInputValue];
            currentOptions = isCacheEmpty ? getInitialCache(paramsRef.current) : optionsCacheRef.current[currentInputValue];

            if (!(currentOptions.isLoading || !currentOptions.hasMore)) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return");

          case 5:
            setOptionsCache(function (prevOptionsCache) {
              return _objectSpread(_objectSpread({}, prevOptionsCache), {}, _defineProperty({}, currentInputValue, _objectSpread(_objectSpread({}, currentOptions), {}, {
                isLoading: true
              })));
            });

            if (!(debounceTimeout > 0 && caller === 'input-change')) {
              _context.next = 13;
              break;
            }

            _context.next = 9;
            return sleep(debounceTimeout);

          case 9:
            newInputValue = paramsRef.current.inputValue;

            if (!(currentInputValue !== newInputValue)) {
              _context.next = 13;
              break;
            }

            setOptionsCache(function (prevOptionsCache) {
              if (isCacheEmpty) {
                var itemForDelete = prevOptionsCache[currentInputValue],
                    restCache = _objectWithoutProperties(prevOptionsCache, [currentInputValue].map(_toPropertyKey));

                return restCache;
              }

              return _objectSpread(_objectSpread({}, prevOptionsCache), {}, _defineProperty({}, currentInputValue, _objectSpread(_objectSpread({}, currentOptions), {}, {
                isLoading: false
              })));
            });
            return _context.abrupt("return");

          case 13:
            hasError = false;
            _context.prev = 14;
            loadOptions = paramsRef.current.loadOptions;
            _context.next = 18;
            return loadOptions(currentInputValue, currentOptions.options, currentOptions.additional);

          case 18:
            response = _context.sent;
            _context.next = 24;
            break;

          case 21:
            _context.prev = 21;
            _context.t0 = _context["catch"](14);
            hasError = true;

          case 24:
            if (!hasError) {
              _context.next = 27;
              break;
            }

            setOptionsCache(function (prevOptionsCache) {
              return _objectSpread(_objectSpread({}, prevOptionsCache), {}, _defineProperty({}, currentInputValue, _objectSpread(_objectSpread({}, currentOptions), {}, {
                isLoading: false
              })));
            });
            return _context.abrupt("return");

          case 27:
            if (validateResponse(response)) {
              _response = response, options = _response.options, hasMore = _response.hasMore; // eslint-disable-next-line no-prototype-builtins

              newAdditional = response.hasOwnProperty('additional') ? response.additional : currentOptions.additional;
              setOptionsCache(function (prevOptionsCache) {
                return _objectSpread(_objectSpread({}, prevOptionsCache), {}, _defineProperty({}, currentInputValue, _objectSpread(_objectSpread({}, currentOptions), {}, {
                  options: reduceOptions(currentOptions.options, options, newAdditional),
                  hasMore: !!hasMore,
                  isLoading: false,
                  isFirstLoad: false,
                  additional: newAdditional
                })));
              });
            }

          case 28:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[14, 21]]);
  }));

  return function requestOptions(_x, _x2, _x3, _x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();