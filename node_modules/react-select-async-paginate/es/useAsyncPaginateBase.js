import { useState, useEffect, useRef, useCallback } from 'react';
import useIsMountedRef from 'use-is-mounted-ref';
import { useLazyRef } from '@vtaits/use-lazy-ref';
import { getInitialCache } from './getInitialCache';
import { getInitialOptionsCache } from './getInitialOptionsCache';
import { defaultShouldLoadMore } from './defaultShouldLoadMore';
import { defaultReduceOptions } from './defaultReduceOptions';
import { requestOptions } from './requestOptions';
export var increaseStateId = function increaseStateId(prevStateId) {
  return prevStateId + 1;
};
export var useAsyncPaginateBase = function useAsyncPaginateBase(params) {
  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var defaultOptions = params.defaultOptions,
      _params$loadOptionsOn = params.loadOptionsOnMenuOpen,
      loadOptionsOnMenuOpen = _params$loadOptionsOn === void 0 ? true : _params$loadOptionsOn,
      _params$debounceTimeo = params.debounceTimeout,
      debounceTimeout = _params$debounceTimeo === void 0 ? 0 : _params$debounceTimeo,
      inputValue = params.inputValue,
      menuIsOpen = params.menuIsOpen,
      _params$filterOption = params.filterOption,
      filterOption = _params$filterOption === void 0 ? null : _params$filterOption,
      _params$reduceOptions = params.reduceOptions,
      reduceOptions = _params$reduceOptions === void 0 ? defaultReduceOptions : _params$reduceOptions,
      _params$shouldLoadMor = params.shouldLoadMore,
      shouldLoadMore = _params$shouldLoadMor === void 0 ? defaultShouldLoadMore : _params$shouldLoadMor;
  var isMountedRef = useIsMountedRef();
  var isInitRef = useRef(true);
  var paramsRef = useRef(params);
  paramsRef.current = params;
  var setStateId = useState(0)[1];
  var optionsCacheRef = useLazyRef(function () {
    return getInitialOptionsCache(params);
  });
  var callRequestOptions = useCallback(function (caller) {
    requestOptions(caller, paramsRef, optionsCacheRef, debounceTimeout, function (reduceState) {
      optionsCacheRef.current = reduceState(optionsCacheRef.current);

      if (isMountedRef.current) {
        setStateId(increaseStateId);
      }
    }, reduceOptions);
  }, [debounceTimeout]);
  var handleScrolledToBottom = useCallback(function () {
    var currentInputValue = paramsRef.current.inputValue;
    var currentOptions = optionsCacheRef.current[currentInputValue];

    if (currentOptions) {
      callRequestOptions('menu-scroll');
    }
  }, [callRequestOptions]);
  useEffect(function () {
    if (isInitRef.current) {
      isInitRef.current = false;
    } else {
      optionsCacheRef.current = {};
      setStateId(increaseStateId);
    }

    if (defaultOptions === true) {
      callRequestOptions('autoload');
    }
  }, deps);
  useEffect(function () {
    if (menuIsOpen && !optionsCacheRef.current[inputValue]) {
      callRequestOptions('input-change');
    }
  }, [inputValue]);
  useEffect(function () {
    if (menuIsOpen && !optionsCacheRef.current[''] && loadOptionsOnMenuOpen) {
      callRequestOptions('menu-toggle');
    }
  }, [menuIsOpen]);
  var currentOptions = optionsCacheRef.current[inputValue] || getInitialCache(params);
  return {
    handleScrolledToBottom: handleScrolledToBottom,
    shouldLoadMore: shouldLoadMore,
    filterOption: filterOption,
    isLoading: currentOptions.isLoading,
    isFirstLoad: currentOptions.isFirstLoad,
    options: currentOptions.options
  };
};